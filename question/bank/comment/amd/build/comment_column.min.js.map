{"version":3,"sources":["../src/comment_column.js"],"names":["define","$","Fragment","Str","ModalEvents","ModalFactory","Notification","CustomEvents","clickEvent","root","modalPromise","create","type","types","CANCEL","large","then","modal","get_string","string","setTitle","fail","exception","on","events","activate","e","preventDefault","currentTarget","target","parentElement","questionId","getAttribute","courseID","contextId","commentFragment","loadFragment","questionid","courseid","setBody","getRoot","cancel","location","reload","hide","init"],"mappings":"AAwBAA,OAAM,gCAAC,CACC,QADD,CAEC,eAFD,CAGC,UAHD,CAIC,mBAJD,CAKC,oBALD,CAMC,mBAND,CAOC,gCAPD,CAAD,CASF,SACIC,CADJ,CAEIC,CAFJ,CAGIC,CAHJ,CAIIC,CAJJ,CAKIC,CALJ,CAMIC,CANJ,CAOIC,CAPJ,CAQE,IAOMC,CAAAA,CAAU,CAAG,SAAUC,CAAV,CAAgB,CAC7B,GAAIC,CAAAA,CAAY,CAAGL,CAAY,CAACM,MAAb,CACf,CACIC,IAAI,CAAEP,CAAY,CAACQ,KAAb,CAAmBC,MAD7B,CAEIC,KAAK,GAFT,CADe,CAIZ,CAACN,CAAD,4CAJY,EAKjBO,IALiB,CAKZ,SAAUC,CAAV,CAAiB,CAIpBd,CAAG,CAACe,UAAJ,CAAe,eAAf,CAAgC,eAAhC,EACKF,IADL,CACU,SAAUG,CAAV,CAAkB,CACpBF,CAAK,CAACG,QAAN,CAAeD,CAAf,EACA,MAAOA,CAAAA,CACV,CAJL,EAKKE,IALL,CAKUf,CAAY,CAACgB,SALvB,EAMA,MAAOL,CAAAA,CACV,CAhBkB,CAAnB,CAqBAR,CAAI,CAACc,EAAL,CAAQhB,CAAY,CAACiB,MAAb,CAAoBC,QAA5B,4CAAgD,SAAUC,CAAV,CAAa,CACzDA,CAAC,CAACC,cAAF,GADyD,GAErDC,CAAAA,CAAa,CAAGF,CAAC,CAACG,MAAF,CAASC,aAF4B,CAIrDC,CAAU,CAAGH,CAAa,CAACI,YAAd,CAA2B,iBAA3B,CAJwC,CAKrDC,CAAQ,CAAGL,CAAa,CAACI,YAAd,CAA2B,eAA3B,CAL0C,CAMrDE,CAAS,CAAGN,CAAa,CAACI,YAAd,CAA2B,gBAA3B,CANyC,CAUzDtB,CAAY,CAACM,IAAb,CAAkB,SAAUC,CAAV,CAAiB,IAO3BkB,CAAAA,CAAe,CAAGjC,CAAQ,CAACkC,YAAT,CAAsB,eAAtB,CAAuC,kBAAvC,CAA2DF,CAA3D,CALX,CACPG,UAAU,CAAEN,CADL,CAEPO,QAAQ,CAAEL,CAFH,CAKW,CAPS,CAQ/BhB,CAAK,CAACsB,OAAN,CAAcJ,CAAd,EACAlB,CAAK,CAACuB,OAAN,GAAgBjB,EAAhB,CAAmBnB,CAAW,CAACqC,MAA/B,CAAuC,SAAUf,CAAV,CAAa,CAChDA,CAAC,CAACC,cAAF,GACAe,QAAQ,CAACC,MAAT,GACA1B,CAAK,CAAC2B,IAAN,EACH,CAJD,EAMA,MAAO3B,CAAAA,CACV,CAhBD,EAgBGI,IAhBH,CAgBQf,CAAY,CAACgB,SAhBrB,CAmBH,CA7BD,CA8BH,CA3DH,CA6DE,MAAO,CACHuB,IAAI,CAAE,cAAUpC,CAAV,CAAgB,CAClBD,CAAU,CAACP,CAAC,CAACQ,CAAD,CAAF,CACb,CAHE,CAKV,CAnFC,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Column selector js.\n *\n * @package    qbank_comment\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n        'jquery',\n        'core/fragment',\n        'core/str',\n        'core/modal_events',\n        'core/modal_factory',\n        'core/notification',\n        'core/custom_interaction_events'\n    ],\n    function (\n        $,\n        Fragment,\n        Str,\n        ModalEvents,\n        ModalFactory,\n        Notification,\n        CustomEvents\n    ) {\n\n        let selector = '[data-target=\"questioncommentpreview\"]';\n\n        /**\n         * Event listeners for the module.\n         */\n        var clickEvent = function (root) {\n            var modalPromise = ModalFactory.create(\n                {\n                    type: ModalFactory.types.CANCEL,\n                    large: true\n                }, [root, selector]\n            ).then(function (modal) {\n                // All of this code only executes once, when the modal is\n                // first created. This allows us to add any code that should\n                // only be run once, such as adding event handlers to the modal.\n                Str.get_string('commentheader', 'qbank_comment')\n                    .then(function (string) {\n                        modal.setTitle(string);\n                        return string;\n                    })\n                    .fail(Notification.exception);\n                return modal;\n            });\n\n            // We need to add an event handler to the tags link because there are\n            // multiple links on the page and without adding a listener we don't know\n            // which one the user clicked on the show the modal.\n            root.on(CustomEvents.events.activate, selector, function (e) {\n                e.preventDefault();\n                var currentTarget = e.target.parentElement;\n\n                var questionId = currentTarget.getAttribute('data-questionid'),\n                    courseID = currentTarget.getAttribute('data-courseid'),\n                    contextId = currentTarget.getAttribute('data-contextid');\n\n                // This code gets called each time the user clicks the tag link\n                // so we can use it to reload the contents of the tag modal.\n                modalPromise.then(function (modal) {\n\n                    var args = {\n                        questionid: questionId,\n                        courseid: courseID\n                    };\n\n                    var commentFragment = Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args);\n                    modal.setBody(commentFragment);\n                    modal.getRoot().on(ModalEvents.cancel, function (e) {\n                        e.preventDefault();\n                        location.reload();\n                        modal.hide();\n                    });\n\n                    return modal;\n                }).fail(Notification.exception);\n\n\n            });\n        };\n\n        return {\n            init: function (root) {\n                clickEvent($(root));\n            }\n        };\n    });"],"file":"comment_column.min.js"}