{"version":3,"sources":["../src/comment.js"],"names":["clickEvent","root","selector","modalPromise","ModalFactory","create","type","types","CANCEL","title","Str","get_string","large","on","CustomEvents","events","activate","e","preventDefault","currentTarget","target","parentElement","questionId","getAttribute","courseID","contextId","then","modal","commentFragment","Fragment","loadFragment","questionid","courseid","setBody","getRoot","ModalEvents","cancel","location","reload","hide","click","fail","Notification","exception","init","questionSelector"],"mappings":"ujBAwBA,OACA,OACA,OACA,OACA,OACA,OACA,O,4lBASMA,CAAAA,CAAU,CAAG,SAACC,CAAD,CAAOC,CAAP,CAAoB,CAEnC,GAAIC,CAAAA,CAAY,CAAGC,UAAaC,MAAb,CACf,CACIC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,MAD7B,CAEIC,KAAK,CAAEC,CAAG,CAACC,UAAJ,CAAe,eAAf,CAAgC,eAAhC,CAFX,CAGIC,KAAK,GAHT,CADe,CAKZ,CAACX,CAAD,CAAOC,CAAP,CALY,CAAnB,CAQAD,CAAI,CAACY,EAAL,CAAQC,UAAaC,MAAb,CAAoBC,QAA5B,CAAsCd,CAAtC,CAAgD,SAACe,CAAD,CAAO,CACnDA,CAAC,CAACC,cAAF,GADmD,GAE/CC,CAAAA,CAAa,CAAGF,CAAC,CAACG,MAAF,CAASC,aAFsB,CAI/CC,CAAU,CAAGH,CAAa,CAACI,YAAd,CAA2B,iBAA3B,CAJkC,CAK/CC,CAAQ,CAAGL,CAAa,CAACI,YAAd,CAA2B,eAA3B,CALoC,CAM/CE,CAAS,CAAGN,CAAa,CAACI,YAAd,CAA2B,gBAA3B,CANmC,CAOnDpB,CAAY,CAACuB,IAAb,CAAkB,SAACC,CAAD,CAAW,IAKrBC,CAAAA,CAAe,CAAGC,UAASC,YAAT,CAAsB,eAAtB,CAAuC,kBAAvC,CAA2DL,CAA3D,CAJX,CACPM,UAAU,CAAET,CADL,CAEPU,QAAQ,CAAER,CAFH,CAIW,CALG,CAMzBG,CAAK,CAACM,OAAN,CAAcL,CAAd,EAEAD,CAAK,CAACO,OAAN,GAAgBrB,EAAhB,CAAmBsB,UAAYC,MAA/B,CAAuC,SAACnB,CAAD,CAAO,CAC1CA,CAAC,CAACC,cAAF,GACAmB,QAAQ,CAACC,MAAT,GACAX,CAAK,CAACY,IAAN,EACH,CAJD,EAMA,cAAE,8BAAF,EAAgCC,KAAhC,CAAsC,UAAW,CAC7CvB,CAAC,CAACC,cAAF,GACAmB,QAAQ,CAACC,MAAT,GACAX,CAAK,CAACY,IAAN,EACH,CAJD,EAKA,MAAOZ,CAAAA,CACV,CApBD,EAoBGc,IApBH,CAoBQC,UAAaC,SApBrB,CAqBH,CA5BD,CA6BH,C,CASYC,CAAI,CAAG,SAAC3C,CAAD,CAAO4C,CAAP,CAA4B,CAE5C7C,CAAU,CAAC,cAAEC,CAAF,CAAD,CAAU4C,CAAV,CACb,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Column selector js.\n *\n * @package    qbank_comment\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Fragment from 'core/fragment';\nimport * as Str from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport CustomEvents from 'core/custom_interaction_events';\n\n/**\n * Event listeners for the module.\n *\n * @method clickEvent\n * @param {object} root\n * @param {string} selector\n */\nconst clickEvent = (root, selector) => {\n    // Modal for the question comments.\n    let modalPromise = ModalFactory.create(\n        {\n            type: ModalFactory.types.CANCEL,\n            title: Str.get_string('commentheader', 'qbank_comment'),\n            large: true\n        }, [root, selector]\n    );\n    // Event listener.\n    root.on(CustomEvents.events.activate, selector, (e) => {\n        e.preventDefault();\n        let currentTarget = e.target.parentElement;\n        // Get the required data for the selected row.\n        let questionId = currentTarget.getAttribute('data-questionid'),\n            courseID = currentTarget.getAttribute('data-courseid'),\n            contextId = currentTarget.getAttribute('data-contextid');\n        modalPromise.then((modal) => {\n            let args = {\n                questionid: questionId,\n                courseid: courseID\n            };\n            let commentFragment = Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args);\n            modal.setBody(commentFragment);\n            // Because we need to reload the page after adding or removing comments to update the count.\n            modal.getRoot().on(ModalEvents.cancel, (e) => {\n                e.preventDefault();\n                location.reload();\n                modal.hide();\n            });\n            // Listed for the x button in modal in case user uses this instead of close.\n            $('button[data-action=\"hide\"]').click(function() {\n                e.preventDefault();\n                location.reload();\n                modal.hide();\n            });\n            return modal;\n        }).fail(Notification.exception);\n    });\n};\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n * @param {string} root the root element selector for the table.\n * @param {string} questionSelector the question comment identifier.\n */\nexport const init = (root, questionSelector) => {\n    // Call for the event listener to listed for clicks in any comment count row.\n    clickEvent($(root), questionSelector);\n};"],"file":"comment.min.js"}