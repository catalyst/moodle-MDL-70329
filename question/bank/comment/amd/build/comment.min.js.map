{"version":3,"sources":["../src/comment.js"],"names":["commentEvent","questionId","courseID","contextId","commentFragment","Fragment","loadFragment","questionid","courseid","ModalFactory","create","type","types","SAVE_CANCEL","title","Str","get_string","body","large","then","modal","root","getRoot","on","ModalEvents","bodyRendered","submitlink","document","querySelectorAll","style","display","get_strings","key","component","strings","setButtonText","fail","Notification","exception","cancel","location","reload","hide","save","e","preventDefault","textarea","value","getAttribute","click","show","init","target","querySelector","addEventListener","dataset","includes","contextid","courseId"],"mappings":"ygBAwBA,OACA,OACA,OACA,OACA,O,4lBAUMA,CAAAA,CAAY,CAAG,SAACC,CAAD,CAAaC,CAAb,CAAuBC,CAAvB,CAAqC,IAKlDC,CAAAA,CAAe,CAAGC,UAASC,YAAT,CAAsB,eAAtB,CAAuC,kBAAvC,CAA2DH,CAA3D,CAJX,CACPI,UAAU,CAAEN,CADL,CAEPO,QAAQ,CAAEN,CAFH,CAIW,CALgC,CAMtDO,UAAaC,MAAb,CAAoB,CAChBC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,WADT,CAEhBC,KAAK,CAAEC,CAAG,CAACC,UAAJ,CAAe,eAAf,CAAgC,eAAhC,CAFS,CAGhBC,IAAI,CAAEb,CAHU,CAIhBc,KAAK,GAJW,CAApB,EAKGC,IALH,CAKQ,SAACC,CAAD,CAAW,CACf,GAAIC,CAAAA,CAAI,CAAGD,CAAK,CAACE,OAAN,EAAX,CAGAD,CAAI,CAACE,EAAL,CAAQC,UAAYC,YAApB,CAAkC,UAAW,CACzC,GAAMC,CAAAA,CAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,oBAA1B,EAAgD,CAAhD,CAAnB,CACAF,CAAU,CAACG,KAAX,CAAiBC,OAAjB,CAA2B,MAC9B,CAHD,EAMAf,CAAG,CAACgB,WAAJ,CAAgB,CACZ,CAACC,GAAG,CAAE,YAAN,CAAoBC,SAAS,CAAE,eAA/B,CADY,CAEZ,CAACD,GAAG,CAAE,OAAN,CAAeC,SAAS,CAAE,eAA1B,CAFY,CAAhB,EAGGd,IAHH,CAGQ,SAACe,CAAD,CAAa,CACjBd,CAAK,CAACe,aAAN,CAAoB,MAApB,CAA4BD,CAAO,CAAC,CAAD,CAAnC,EACAd,CAAK,CAACe,aAAN,CAAoB,QAApB,CAA8BD,CAAO,CAAC,CAAD,CAArC,CAEH,CAPD,EAOGE,IAPH,CAOQC,UAAaC,SAPrB,EASAjB,CAAI,CAACE,EAAL,CAAQC,UAAYe,MAApB,CAA4B,UAAW,CACnCC,QAAQ,CAACC,MAAT,GACArB,CAAK,CAACsB,IAAN,EACH,CAHD,EAMArB,CAAI,CAACE,EAAL,CAAQC,UAAYmB,IAApB,CAA0B,SAASC,CAAT,CAAY,CAClCA,CAAC,CAACC,cAAF,GADkC,GAE5BnB,CAAAA,CAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,oBAA1B,EAAgD,CAAhD,CAFe,CAG5BkB,CAAQ,CAAGnB,QAAQ,CAACC,gBAAT,CAA0B,2BAA1B,EAAuD,CAAvD,CAHiB,CAMlC,GAAIkB,CAAQ,CAACC,KAAT,EAAkBD,CAAQ,CAACE,YAAT,CAAsB,YAAtB,CAAlB,EAA2E,EAAlB,EAAAF,CAAQ,CAACC,KAAtE,CAAmF,CAC/ErB,CAAU,CAACuB,KAAX,EACH,CAEJ,CAVD,EAWA5B,CAAI,CAACE,EAAL,CAAQ,OAAR,CAAiB,8BAAjB,CAA+C,UAAM,CACjDiB,QAAQ,CAACC,MAAT,GACArB,CAAK,CAACsB,IAAN,EACH,CAHD,EAIAtB,CAAK,CAAC8B,IAAN,GACA,MAAO9B,CAAAA,CACV,CA/CD,EA+CGgB,IA/CH,CA+CQC,UAAaC,SA/CrB,CAgDH,C,QAOmB,QAAPa,CAAAA,IAAO,EAAM,CACtB,GAAIC,CAAAA,CAAM,CAAGzB,QAAQ,CAAC0B,aAAT,CAAuB,qBAAvB,CAAb,CACAD,CAAM,CAACE,gBAAP,CAAwB,OAAxB,CAAiC,SAACV,CAAD,CAAO,CACpC,GAAIA,CAAC,CAACQ,MAAF,CAASG,OAAT,CAAiBH,MAAjB,EAA2BR,CAAC,CAACQ,MAAF,CAASG,OAAT,CAAiBH,MAAjB,CAAwBI,QAAxB,CAAiC,wBAAjC,CAA/B,CAA2F,IACnFrD,CAAAA,CAAS,CAAGyC,CAAC,CAACQ,MAAF,CAASG,OAAT,CAAiBE,SADsD,CAEnFC,CAAQ,CAAGd,CAAC,CAACQ,MAAF,CAASG,OAAT,CAAiB/C,QAFuD,CAGnFP,CAAU,CAAG2C,CAAC,CAACQ,MAAF,CAASG,OAAT,CAAiBhD,UAHqD,CAKvFP,CAAY,CAACC,CAAD,CAAayD,CAAb,CAAuBvD,CAAvB,CACf,CACJ,CARD,CASH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Column selector js.\n *\n * @module     qbank_comment/comment\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport * as Str from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\n\n/**\n * Event listeners for the module.\n *\n * @method clickEvent\n * @param {Number} questionId\n * @param {Number} courseID\n * @param {Number} contextId\n */\nconst commentEvent = (questionId, courseID, contextId) => {\n    let args = {\n        questionid: questionId,\n        courseid: courseID\n    };\n    let commentFragment = Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args);\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: Str.get_string('commentheader', 'qbank_comment'),\n        body: commentFragment,\n        large: true,\n    }).then((modal) => {\n        let root = modal.getRoot();\n\n        // Don't display the default add comment link in the modal.\n        root.on(ModalEvents.bodyRendered, function() {\n            const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\n            submitlink.style.display = 'none';\n        });\n\n        // Get the required strings and updated the modal button text labels.\n        Str.get_strings([\n            {key: 'addcomment', component: 'qbank_comment'},\n            {key: 'close', component: 'qbank_comment'},\n        ]).then((strings) => {\n            modal.setButtonText('save', strings[0]);\n            modal.setButtonText('cancel', strings[1]);\n            return;\n        }).fail(Notification.exception);\n\n        root.on(ModalEvents.cancel, function() {\n            location.reload();\n            modal.hide();\n        });\n\n        // Handle adding the comment when the button in the modal is clicked.\n        root.on(ModalEvents.save, function(e) {\n            e.preventDefault();\n            const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\n            const textarea = document.querySelectorAll(\"div.comment-area textarea\")[0];\n\n            // Check there is a valid comment to add, and trigger adding if there is.\n            if (textarea.value != textarea.getAttribute('aria-label') && textarea.value != '') {\n                submitlink.click();\n            }\n\n        });\n        root.on('click', 'button[data-action=\"hide\"]', () => {\n            location.reload();\n            modal.hide();\n        });\n        modal.show();\n        return modal;\n    }).fail(Notification.exception);\n};\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n */\nexport const init = () => {\n    let target = document.querySelector('#questionscontainer');\n    target.addEventListener('click', (e) => {\n        if (e.target.dataset.target && e.target.dataset.target.includes('questioncommentpreview')) {\n            let contextId = e.target.dataset.contextid;\n            let courseId = e.target.dataset.courseid;\n            let questionId = e.target.dataset.questionid;\n            // Call for the event listener to listed for clicks in any comment count row.\n            commentEvent(questionId, courseId, contextId);\n        }\n    });\n};\n"],"file":"comment.min.js"}