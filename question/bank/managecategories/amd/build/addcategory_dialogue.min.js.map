{"version":3,"sources":["../src/addcategory_dialogue.js"],"names":["displayModal","selector","contextid","categoryid","cmid","courseid","title","trigger","document","querySelector","addEventListener","e","preventDefault","element","target","modalForm","ModalForm","formClass","args","modalConfig","large","saveButtonText","returnFocus","events","FORM_SUBMITTED","getCategoriesFragment","done","html","js","Templates","replaceNodeContents","show","params","url","location","href","Fragment","loadFragment","initModal"],"mappings":"yOA2BA,OACA,OACA,O,sDAWMA,CAAAA,CAAY,CAAG,SAACC,CAAD,CAAWC,CAAX,CAAsBC,CAAtB,CAAkCC,CAAlC,CAAwCC,CAAxC,CAAqD,CACtE,GAAIC,CAAAA,CAAK,CAAG,iBAAU,aAAV,CAAyB,UAAzB,CAAZ,CACA,GAAmB,IAAf,GAAAH,CAAJ,CAAyB,CACvBG,CAAK,CAAG,iBAAU,cAAV,CAA0B,UAA1B,CACT,CACD,GAAMC,CAAAA,CAAO,CAAGC,QAAQ,CAACC,aAAT,CAAuBR,CAAvB,CAAhB,CACA,GAAgB,IAAZ,GAAAM,CAAJ,CAAsB,CACpBA,CAAO,CAACG,gBAAR,CAAyB,OAAzB,CAAkC,SAAAC,CAAC,CAAI,CACrCA,CAAC,CAACC,cAAF,GADqC,GAE/BC,CAAAA,CAAO,CAAGF,CAAC,CAACG,MAFmB,CAG/BC,CAAS,CAAG,GAAIC,UAAJ,CAAc,CAC5BC,SAAS,CAAE,2DADiB,CAE5BC,IAAI,CAAE,CACJhB,SAAS,CAAEA,CADP,CAEJC,UAAU,CAAEA,CAFR,CAGJC,IAAI,CAAEA,CAHF,CAIJC,QAAQ,CAAEA,CAJN,CAFsB,CAQ5Bc,WAAW,CAAE,CACXb,KAAK,CAAEA,CADI,CAEXc,KAAK,GAFM,CARe,CAY5BC,cAAc,CAAEf,CAZY,CAa5BgB,WAAW,CAAET,CAbe,CAAd,CAHmB,CAkBrCE,CAAS,CAACL,gBAAV,CAA2BK,CAAS,CAACQ,MAAV,CAAiBC,cAA5C,CAA4D,UAAM,CAChE,MAAOC,CAAAA,CAAqB,CAACvB,CAAD,CAAYE,CAAZ,CAAkBC,CAAlB,CAArB,CAAiDqB,IAAjD,CAAsD,SAACC,CAAD,CAAOC,CAAP,CAAc,CACzEC,UAAUC,mBAAV,CAA8B,qBAA9B,CAAqDH,CAArD,CAA2DC,CAA3D,CACD,CAFM,CAIR,CALD,EAOAb,CAAS,CAACgB,IAAV,EACD,CA1BD,CA2BD,CACJ,C,CAUMN,CAAqB,CAAG,SAACvB,CAAD,CAAYE,CAAZ,CAAkBC,CAAlB,CAA+B,CAC5D,GAAI2B,CAAAA,CAAM,CAAG,CACTC,GAAG,CAAEC,QAAQ,CAACC,IADL,CAAb,CAGA,GAAI/B,CAAI,SAAR,CAAwB,CACtB4B,CAAM,CAAC5B,IAAP,CAAcA,CACf,CACD,GAAIC,CAAQ,SAAZ,CAA4B,CAC1B2B,CAAM,CAAC3B,QAAP,CAAkBA,CACnB,CACD,MAAO+B,WAASC,YAAT,CAAsB,wBAAtB,CAAgD,oBAAhD,CAAsEnC,CAAtE,CAAiF8B,CAAjF,CACR,C,aAEwB,QAAZM,CAAAA,SAAY,CAACrC,CAAD,CAAWC,CAAX,CAAsBC,CAAtB,CAAkCC,CAAlC,CAAwCC,CAAxC,CAAqD,CAC5EL,CAAY,CAACC,CAAD,CAAWC,CAAX,CAAsBC,CAAtB,CAAkCC,CAAlC,CAAwCC,CAAxC,CACb,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for addition or edition of category as a modal form.\n * Clicking \"Add category\" or \"Edit > Edit settings\" will trigger this modal.\n *\n * @module     qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport {get_string as getString} from 'core/str';\nimport Fragment from 'core/fragment';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\n\n/**\n * Function handling display of moodle form.\n *\n * @param {string} selector Selector to trigger form display on.\n * @param {int} contextid Context id for fragment.\n * @param {int} categoryid Category id for edit form and data-action.\n * @param {int} cmid Course module id.\n * @param {int} courseid Course id.\n */\nconst displayModal = (selector, contextid, categoryid, cmid, courseid) => {\n    let title = getString('addcategory', 'question');\n    if (categoryid !== null) {\n      title = getString('editcategory', 'question');\n    }\n    const trigger = document.querySelector(selector);\n    if (trigger !== null) {\n      trigger.addEventListener('click', e => {\n        e.preventDefault();\n        const element = e.target;\n        const modalForm = new ModalForm({\n            formClass: \"qbank_managecategories\\\\form\\\\question_category_edit_form\",\n            args: {\n              contextid: contextid,\n              categoryid: categoryid,\n              cmid: cmid,\n              courseid: courseid\n            },\n            modalConfig: {\n              title: title,\n              large: true,\n            },\n            saveButtonText: title,\n            returnFocus: element,\n        });\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n          return getCategoriesFragment(contextid, cmid, courseid).done((html, js) => {\n            Templates.replaceNodeContents('#categoriesrendered', html, js);\n          });\n          // Refresh fragment for category rendering here.\n        });\n        // Show the form.\n        modalForm.show();\n      });\n    }\n};\n\n/**\n * Call category_rendering fragment.\n *\n * @param {int} contextid String containing new ordered categories.\n * @param {int} cmid Course module id.\n * @param {int} courseid Course id.\n * @returns {Promise}\n */\n const getCategoriesFragment = (contextid, cmid, courseid) => {\n  let params = {\n      url: location.href,\n  };\n  if (cmid !== undefined) {\n    params.cmid = cmid;\n  }\n  if (courseid !== undefined) {\n    params.courseid = courseid;\n  }\n  return Fragment.loadFragment('qbank_managecategories', 'category_rendering', contextid, params);\n};\n\nexport const initModal = (selector, contextid, categoryid, cmid, courseid) => {\n  displayModal(selector, contextid, categoryid, cmid, courseid);\n};\n"],"file":"addcategory_dialogue.min.js"}