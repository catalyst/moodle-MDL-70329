{"version":3,"sources":["../src/addcategory_dialogue.js"],"names":["displayModal","selector","contextid","categoryid","title","Str","get_string","trigger","document","querySelector","ModalFactory","create","type","types","SAVE_CANCEL","body","getBody","large","done","modal","addEventListener","show","setSaveButtonText","root","getRoot","on","ModalEvents","hidden","setBody","modalCount","shown","append","save","e","submitForm","submitFormAjax","then","hide","location","reload","catch","formdata","modalid","params","id","jsonformdata","htmlBody","Fragment","loadFragment","handleFormSubmissionFailure","preventDefault","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","error","length","first","focus","formData","serialize","methodname","promise","Promise","resolve","reject","response","Ajax","call","args","JSON","stringify","fail","resp","parse","submit","initModal"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module handling creation of Modal form.\n *\n * @package    qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport * as Str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\n\n/**\n * Function handling display of moodle form.\n *\n * @param {string} selector Selector to trigger form display on.\n * @param {int} contextid Context id for fragment.\n * @param {int} categoryid Category id for edit form and data-action.\n */\nconst displayModal = (selector, contextid, categoryid) => {\n  let title = Str.get_string('addcategory', 'question');\n    if (categoryid !== undefined) {\n      title = Str.get_string('editcategory', 'question');\n    }\n    const trigger = document.querySelector(selector);\n    ModalFactory.create({\n      type: ModalFactory.types.SAVE_CANCEL,\n      title: title,\n      body: getBody(contextid, categoryid),\n      large: true,\n    })\n    .done((modal) => {\n      trigger.addEventListener('click', () => {\n        modal.show();\n      });\n      if (categoryid === undefined) {\n        modal.setSaveButtonText(Str.get_string('addcategory', 'question'));\n      }\n      const root = modal.getRoot();\n      root.on(ModalEvents.hidden, () => {\n        modal.setBody(getBody(contextid, categoryid, undefined, modal.modalCount));\n      });\n      root.on(ModalEvents.shown, () => {\n        root.append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n      });\n      root.on(ModalEvents.save, (e) =>{\n        submitForm(modal, e);\n      });\n      root.on('submit', 'form', (e) => {\n        submitFormAjax(modal, categoryid, contextid, modal.modalCount, e)\n        .then(() => {\n          modal.hide();\n          location.reload();\n        })\n        .catch(() => {});\n      });\n    });\n};\n\n/**\n * Get body for moodle form from fragment new_category_form.\n *\n * @param {int} contextid Context id for fragment.\n * @param {int} categoryid Category id for edit form and data-action.\n * @param {String} formdata Data from submited form to check.\n * @param {int} modalid Id for the modal created - passed to avoid atto editor to send infos to other forms.\n * @returns {Promise}\n */\nconst getBody = (contextid, categoryid, formdata, modalid) => {\n    let params = {};\n    if (modalid !== undefined) {\n      params.modalid = modalid;\n    }\n    if (categoryid !== undefined) {\n      params.id = categoryid;\n    }\n    if (formdata !== undefined) {\n      params.jsonformdata = formdata;\n    }\n    const htmlBody = Fragment.loadFragment('qbank_managecategories', 'new_category_form', contextid, params);\n    return htmlBody;\n};\n\n/**\n * Handle form submission failure and allows checks server side.\n *\n * @param {Object} modal Object representing form data.\n * @param {int} contextid Context id for fragment.\n * @param {int} categoryid Category id for edit form and data-action.\n * @param {String} formdata Data from submited form to check.\n * @param {int} modalid Id for the modal created - passed to avoid atto editor to send infos to other forms.\n */\nconst handleFormSubmissionFailure = (modal, contextid, categoryid, formdata, modalid) => {\n  modal.setBody(getBody(contextid, categoryid, formdata, modalid));\n};\n\n/**\n * Call external function add_category_form or edit_category_form,\n * updates or insert newly added category in the question_categories table.\n *\n * @param {Object} modal Object representing form data.\n * @param {int} categoryid Category id for edit form and data-action.\n * @param {int} contextid Context id for fragment.\n * @param {int} modalid Id for the modal created - passed to avoid atto editor to send infos to other forms.\n * @param {Event} e Form submission event.\n * @returns {Mixed}\n */\nconst submitFormAjax = (modal, categoryid, contextid, modalid, e) => {\n  e.preventDefault();\n  const changeEvent = document.createEvent('HTMLEvents');\n  changeEvent.initEvent('change', true, true);\n\n  modal.getRoot().find(':input').each((index, element) => {\n    element.dispatchEvent(changeEvent);\n  });\n\n  const invalid = modal.getRoot().find('[aria-invalid=\"true\"]');\n  const error = modal.getRoot().find('.error');\n\n  // If we found invalid fields, focus on the first one and do not submit via ajax.\n  if (invalid.length || error.length) {\n      invalid.first().focus();\n      return;\n  }\n\n  const formData = modal.getRoot().find('form').serialize();\n  let methodname = 'qbank_managecategories_submit_edit_category_form';\n  if (categoryid === undefined) {\n    methodname = 'qbank_managecategories_submit_add_category_form';\n  }\n  const promise = new Promise((resolve, reject) => {\n    const response = Ajax.call([{\n      methodname: methodname,\n      args: {jsonformdata: JSON.stringify(formData)},\n      fail: handleFormSubmissionFailure(modal, contextid, categoryid, formData, modalid)\n    }]);\n    response[0].then((resp) => {\n      if (JSON.parse(resp) === false) {\n        reject();\n      } else {\n        resolve();\n      }\n    });\n  });\n  return promise;\n};\n\n/**\n * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n *\n * @param {Object} modal representing form data.\n * @param {Event} e Form submission event.\n */\nconst submitForm = (modal, e) => {\n  e.preventDefault();\n  modal.getRoot().find('form').submit();\n};\n\nexport const initModal = (selector, contextid, categoryid) => {\n  displayModal(selector, contextid, categoryid);\n};\n"],"file":"addcategory_dialogue.min.js"}