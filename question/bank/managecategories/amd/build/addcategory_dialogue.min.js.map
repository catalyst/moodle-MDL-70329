{"version":3,"file":"addcategory_dialogue.min.js","sources":["../src/addcategory_dialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for addition or edition of category as a modal form.\n * Clicking \"Add category\" or \"Edit > Edit settings\" will trigger this modal.\n *\n * @module     qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport {get_string as getString} from 'core/str';\nimport Fragment from 'core/fragment';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\n\n/**\n * Return modal title\n *\n * @param {boolean} isEdit is 'add' or 'edit' form\n * @returns {String} title string\n */\nconst getTitle = isEdit => getString(isEdit ? 'editcategory' : 'addcategory', 'question');\n\n/**\n * Function handling display of moodle form.\n *\n */\nexport const initModal = () => {\n    document.addEventListener('click', e => {\n        const addEditButton = e.target.closest('[data-action=\"addeditcategory\"]');\n\n        // Return if it is not 'addeditcategory' button.\n        if (!addEditButton) {\n            return;\n        }\n\n        // Return if the action type is not specified.\n        if (!addEditButton.dataset.actiontype) {\n            return;\n        }\n\n        e.preventDefault();\n        // Data for the modal.\n        const title = getTitle(addEditButton.dataset.actiontype === 'edit');\n        const contextid = addEditButton.dataset.contextid;\n        const categoryid = addEditButton.dataset.categoryid;\n        const cmid = addEditButton.dataset.cmid;\n        const courseid = addEditButton.dataset.courseid;\n\n        // Page context.\n        const pagecontextid = document.getElementById('categoriesrendered')?.dataset.contextid ?? contextid;\n\n        // Call the modal.\n        const modalForm = new ModalForm({\n            formClass: \"qbank_managecategories\\\\form\\\\question_category_edit_form\",\n            args: {\n                contextid,\n                categoryid,\n                cmid,\n                courseid\n            },\n            modalConfig: {\n                title: title,\n                large: true,\n            },\n            saveButtonText: title,\n            returnFocus: addEditButton,\n        });\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n            return getCategoriesFragment(pagecontextid, cmid, courseid)\n                .then((html, js) => {\n                    Templates.replaceNode('#categoriesrendered', html, js);\n                    return;\n                });\n        });\n        // Show the form.\n        modalForm.show();\n    });\n};\n\n/**\n * Call category_rendering fragment.\n *\n * @param {number} contextid String containing new ordered categories.\n * @param {number} cmid Course module id.\n * @param {number} courseid Course id.\n * @returns {Promise}\n */\nconst getCategoriesFragment = (contextid, cmid, courseid) => {\n    const params = {\n        url: location.href,\n    };\n    if (cmid !== undefined) {\n        params.cmid = cmid;\n    }\n    if (courseid !== undefined) {\n        params.courseid = courseid;\n    }\n    return Fragment.loadFragment('qbank_managecategories', 'category_rendering', contextid, params);\n};\n"],"names":["document","addEventListener","e","addEditButton","target","closest","dataset","actiontype","preventDefault","title","isEdit","contextid","categoryid","cmid","courseid","pagecontextid","getElementById","_document$getElementB2","modalForm","ModalForm","formClass","args","modalConfig","large","saveButtonText","returnFocus","events","FORM_SUBMITTED","getCategoriesFragment","then","html","js","replaceNode","show","params","url","location","href","undefined","Fragment","loadFragment"],"mappings":";;;;;;;;;;kPA2CyB,KACrBA,SAASC,iBAAiB,SAASC,2DACzBC,cAAgBD,EAAEE,OAAOC,QAAQ,uCAGlCF,yBAKAA,cAAcG,QAAQC,kBAI3BL,EAAEM,uBAEIC,OAtBGC,OAsBmD,SAArCP,cAAcG,QAAQC,YAtB1B,mBAAUG,OAAS,eAAiB,cAAe,aAA7DA,IAAAA,aAuBHC,UAAYR,cAAcG,QAAQK,UAClCC,WAAaT,cAAcG,QAAQM,WACnCC,KAAOV,cAAcG,QAAQO,KAC7BC,SAAWX,cAAcG,QAAQQ,SAGjCC,2EAAgBf,SAASgB,eAAe,+DAAxBC,uBAA+CX,QAAQK,iEAAaA,UAGpFO,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,4DACXC,KAAM,CACFV,UAAAA,UACAC,WAAAA,WACAC,KAAAA,KACAC,SAAAA,UAEJQ,YAAa,CACTb,MAAOA,MACPc,OAAO,GAEXC,eAAgBf,MAChBgB,YAAatB,gBAEjBe,UAAUjB,iBAAiBiB,UAAUQ,OAAOC,gBAAgB,IACjDC,sBAAsBb,cAAeF,KAAMC,UAC7Ce,MAAK,CAACC,KAAMC,yBACCC,YAAY,sBAAuBF,KAAMC,SAK/Db,UAAUe,iBAYZL,sBAAwB,CAACjB,UAAWE,KAAMC,kBACtCoB,OAAS,CACXC,IAAKC,SAASC,kBAELC,IAATzB,OACAqB,OAAOrB,KAAOA,WAEDyB,IAAbxB,WACAoB,OAAOpB,SAAWA,UAEfyB,kBAASC,aAAa,yBAA0B,qBAAsB7B,UAAWuB"}