{"version":3,"file":"category_list.min.js","sources":["../src/category_list.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module handling ordering of categories.\n *\n * @module     qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    CATEGORY_LIST: '.category_list',\n    MODAL_CATEGORY_ITEM: '.modal_category_item[data-categoryid]',\n    CATEGORY_RENDERED: '#categoriesrendered',\n    ACTIONABLE_ELEMENT: 'a, [role=\"button\"], [role=\"menuitem\"]',\n    SHOW_DESCRIPTION_CHECKBOX: '[name=\"qbshowdescr\"]',\n    MOVE_CATEGORY_MENU_ITEM: '[role=\"menuitem\"][data-actiontype=\"move\"]',\n    DRAGGABLE_ITEM: '[draggable=\"true\"]',\n    DROPPABLE_ITEM: '.list_item[data-categoryid]',\n};\n\n/**\n * Sets up sortable list in the column sort order page.\n * @param {number} pagecontextid Context id for fragment.\n */\nconst setupSortableLists = (pagecontextid) => {\n    const draggableitems = document.querySelectorAll(SELECTORS.DRAGGABLE_ITEM);\n    const droppableitems = document.querySelectorAll(SELECTORS.DROPPABLE_ITEM);\n\n    // Touch events do not have datatranfer property.\n    // This variable is used to store id of first element that started the touch events.\n    let categoryid;\n\n    /**\n     * Get touch target at touch point.\n     * The target of all touch events is the first element that has been touched at 'touch start'.\n     * So we need to infer the target from touch point for 'touch move' and 'touch end' events.\n     *\n     * @param {Object} e event\n     * @returns {any | Element}\n     */\n    const getTouchTarget = (e) => {\n        const target = document.elementFromPoint(\n            e.changedTouches[0].pageX,\n            e.changedTouches[0].pageY\n        );\n        // Check if the target is droppable.\n        return target.closest(SELECTORS.DROPPABLE_ITEM);\n    };\n\n    /**\n     * Handle Drag start\n     * @param {Object} e event\n     */\n    const handleDragStart = (e) => {\n        const target = e.target.closest(SELECTORS.DRAGGABLE_ITEM);\n        // Return if target is not a draggable item.\n        if (!target) {\n            return;\n        }\n\n        // Save category ID of current moving item.\n        // The datatransfer is not used as it is not a property of touch events.\n        categoryid = target.dataset?.categoryid;\n\n        // Prevent scrolling when touching on the draggable item.\n        if (e.type == 'touchstart' && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    /**\n     * Handle Drag move\n     * Provide drag effect for touch events.\n     *\n     * @param {Object} e event\n     */\n    const handleDrag = (e) => {\n        // Remove all highlight.\n        droppableitems.forEach(item => {\n            item.classList.remove('border-danger');\n        });\n\n        let target;\n        if (e.type == 'touchmove') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest(SELECTORS.DROPPABLE_ITEM);\n        }\n\n        // Return if target is not a droppable item or there is no sourceid.\n        if (!target || !categoryid) {\n            return;\n        }\n\n        // Highlight the target.\n        target.classList.add('border-danger');\n    };\n\n    /**\n     * Handle Drag end\n     * @param {Object} e event\n     */\n    const handleDragEnd = (e) => {\n        let target;\n        if (e.type == 'touchend') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest(SELECTORS.DROPPABLE_ITEM);\n        }\n\n        // Return if target is not a droppable item or there is no sourceid.\n        if (!target || !categoryid) {\n            return;\n        }\n\n        // Get list item whose id is the same as current moving category id.\n        const source = document.getElementById(`category-${categoryid}`);\n        if (!source) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // Reset sourceid for touch event.\n        categoryid = null;\n\n        // Insert the source item after the \"target\" item.\n        target.closest(SELECTORS.CATEGORY_LIST).insertBefore(source, target.nextSibling);\n\n        // Old category.\n        const originCategory = source.dataset.categoryid;\n\n        // Insert after this category.\n        const insertaftercategory = target.dataset.categoryid;\n\n        // Insert the category after the target category\n        setCatOrder(originCategory, insertaftercategory, pagecontextid);\n    };\n\n    /**\n     * Allow drop\n     * This is required to allow drop event to be trigger on an element.\n     *\n     * @param {Object} e event\n     */\n    const allowDrop = (e) => {\n        e.preventDefault();\n    };\n\n    // Disable scrolling (for touch event) on the draggable item.\n    draggableitems.forEach(item => {\n            item.setAttribute(\"style\", \"touch-action: none;\");\n        }\n    );\n\n    // Events for droppable items.\n    droppableitems.forEach(item => {\n        item.addEventListener('dragenter', handleDrag);\n        item.addEventListener('dragover', allowDrop);\n        item.addEventListener('drop', handleDragEnd);\n    });\n\n    // Add event to draggable items.\n    draggableitems.forEach(item => {\n        // Touch events.\n        item.addEventListener('touchstart', handleDragStart, false);\n        item.addEventListener('touchmove', handleDrag, false);\n        item.addEventListener('touchend', handleDragEnd, false);\n\n        // Drag events.\n        item.addEventListener('dragstart', handleDragStart);\n    });\n};\n\n/**\n * Call category_rendering fragment.\n *\n * @param {number} contextid String containing new ordered categories.\n * @returns {Promise}\n */\nconst getCategoriesFragment = (contextid) => {\n    let params = {\n        url: location.href,\n    };\n    return Fragment.loadFragment('qbank_managecategories', 'category_rendering', contextid, params);\n};\n\n/**\n * Call external function update_category_order - inserts the updated column in the question_categories table.\n *\n * @param {number} origincategory Category which was dragged.\n * @param {number} insertaftercategory Context where category was dropped.\n * @param {number} pagecontextid Context from which the category was dragged.\n */\nconst setCatOrder = (origincategory, insertaftercategory, pagecontextid) => {\n    const call = {\n        methodname: 'qbank_managecategories_update_category_order',\n        args: {\n            origincategory: origincategory,\n            insertaftercategory: insertaftercategory,\n        }\n    };\n    Ajax.call([call])[0]\n        .then(() => {\n            return getCategoriesFragment(pagecontextid);\n        })\n        .catch(error => {\n            Notification.addNotification({\n                message: error.message,\n                type: 'error',\n            });\n            document.getElementsByClassName('alert-danger')[0]?.scrollIntoView();\n            return getCategoriesFragment(pagecontextid);\n        })\n        .then((html, js) => {\n            Templates.replaceNode('#categoriesrendered', html, js);\n            return;\n        })\n        .catch(Notification.exception);\n};\n\n\n/**\n * Method to add listener on category arrow - descendants.\n *\n * @param {number} pagecontextid Context id for fragment.\n */\nconst categoryParentListener = (pagecontextid) => {\n    document.addEventListener('click', e => {\n\n        // Ignore if there is no categories containers.\n        if (!e.target.closest(SELECTORS.CATEGORY_RENDERED)) {\n            return;\n        }\n\n        // Ignore if there is no action icon.\n        const actionIcon = e.target.closest('.action-icon');\n        if (!actionIcon) {\n            return;\n        }\n\n        // Retrieve data from action icon.\n        const data = actionIcon.dataset;\n\n        // Move category.\n        const call = {\n            methodname: 'qbank_managecategories_update_category_order',\n            args: {\n                origincategory: data.tomove,\n                newparentcategory: data.tocategory,\n            }\n        };\n\n        Ajax.call([call])[0]\n            .then(() => getCategoriesFragment(pagecontextid))\n            .then((html, js) => {\n                Templates.replaceNode(SELECTORS.CATEGORY_RENDERED, html, js);\n                return;\n            })\n            .catch(Notification.exception);\n    });\n};\n\n/**\n * Sets events listener for checkbox ticking change.\n */\nconst setupShowDescriptionCheckbox = () => {\n    document.addEventListener('click', e => {\n        const checkbox = e.target.closest(SELECTORS.SHOW_DESCRIPTION_CHECKBOX);\n        if (!checkbox) {\n            return;\n        }\n        checkbox.form.submit();\n    });\n};\n\n/**\n * Sets events listener for move category using dragdrop icon.\n * @param {number} pagecontextid Context id to get all relevant categories.\n */\nconst setUpMoveMenuItem = (pagecontextid) => {\n    document.addEventListener('click', e => {\n        // Return if it is not menu item.\n        const item = e.target.closest(SELECTORS.MOVE_CATEGORY_MENU_ITEM);\n        if (!item) {\n            return;\n        }\n        // Return if it is disabled.\n        if (item.getAttribute('aria-disabled')) {\n            return;\n        }\n\n        // Prevent addition click on the item.\n        item.setAttribute('aria-disabled', true);\n\n        // Get categories.\n        const call = {\n            methodname: 'qbank_managecategories_get_categories_in_a_context',\n            args: {\n                contextid: pagecontextid,\n            }\n        };\n\n        Ajax.call([call])[0]\n            .then((data) => {\n                // Exclude the current moving category from the data.\n                data.contexts.forEach(context => {\n                    if (context.contextid == item.dataset.contextid) {\n                        context.categories.forEach(category => {\n                            if (category.id == item.dataset.categoryid) {\n                                category.disabled = true;\n                                return;\n                            }\n                        });\n                    }\n                });\n                // Render template with retrieved data.\n                return Templates.renderForPromise('qbank_managecategories/move_category', data);\n            })\n            .then((template) => {\n                // Create modal.\n                return ModalFactory.create({\n                    title: getString('movecategory', 'question'),\n                    body: template.html\n                });\n            })\n            .then(modal => {\n                // Show modal and add click event for list item.\n                modal.show();\n                document.querySelector('.modal').addEventListener('click', e => {\n                    const target = e.target.closest(SELECTORS.MODAL_CATEGORY_ITEM);\n                    if (!target) {\n                        return;\n                    }\n                    setCatOrder(item.dataset.categoryid, target.dataset.categoryid, pagecontextid);\n                    modal.destroy();\n                });\n                item.setAttribute('aria-disabled', false);\n                return;\n            })\n            .catch(Notification.exception);\n    });\n};\n\nexport const init = (pagecontextid) => {\n    categoryParentListener(pagecontextid);\n    setupSortableLists(pagecontextid);\n    setupShowDescriptionCheckbox();\n    setUpMoveMenuItem(pagecontextid);\n};\n"],"names":["SELECTORS","getCategoriesFragment","contextid","params","url","location","href","Fragment","loadFragment","setCatOrder","origincategory","insertaftercategory","pagecontextid","call","methodname","args","then","catch","error","addNotification","message","type","document","getElementsByClassName","scrollIntoView","html","js","replaceNode","Notification","exception","addEventListener","e","target","closest","actionIcon","data","dataset","tomove","newparentcategory","tocategory","categoryParentListener","draggableitems","querySelectorAll","droppableitems","categoryid","getTouchTarget","elementFromPoint","changedTouches","pageX","pageY","handleDragStart","_target$dataset","cancelable","preventDefault","handleDrag","forEach","item","classList","remove","add","handleDragEnd","source","getElementById","insertBefore","nextSibling","originCategory","allowDrop","setAttribute","setupSortableLists","checkbox","form","submit","getAttribute","contexts","context","categories","category","id","disabled","Templates","renderForPromise","template","ModalFactory","create","title","body","modal","show","querySelector","destroy","setUpMoveMenuItem"],"mappings":"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"}