{"version":3,"file":"category_list.min.js","sources":["../src/category_list.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module handling ordering of categories.\n *\n * @module     qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\n\n/**\n * Sets up sortable list in the column sort order page.\n * @param {number} pagecontextid Context id for fragment.\n */\nconst setupSortableLists = (pagecontextid) => {\n    const listitems = document.querySelectorAll('.category-list-item');\n\n    let sourceid;\n\n    /**\n     * Get touch target at touch point.\n     * @param {Object} e event\n     * @returns {any | Element}\n     */\n    const getTouchTarget = (e) => {\n        const target = document.elementFromPoint(\n            e.changedTouches[0].pageX,\n            e.changedTouches[0].pageY\n        );\n        // Check if the target is the list item.\n        return target.closest('.category-list-item');\n    };\n\n    /**\n     * Handle Drag start\n     * @param {Object} e event\n     */\n    const handleDragStart = (e) => {\n        // Identify the event target.\n        let target;\n        if (e.type == 'touchstart') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest('.category-list-item');\n        }\n\n        if (e.cancelable) {\n            e.preventDefault();\n        }\n\n        // Save current category id.\n        sourceid = target.id;\n    };\n\n    /**\n     * Handle Drag move\n     * @param {Object} e event\n     */\n    const handleDrag = (e) => {\n        // Identify the event target.\n        let target;\n        if (e.type == 'touchmove') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest('.category-list-item');\n        }\n\n        // Return if target not category list item.\n        if (!target) {\n            return;\n        }\n\n        // Return if sourceid is not set.\n        if (!sourceid) {\n            return;\n        }\n\n        if (e.cancelable) {\n            e.preventDefault();\n        }\n\n        // Highlight the target.\n        listitems.forEach(item => {\n            item.classList.remove('border-danger');\n        });\n        target.classList.add('border-danger');\n    };\n\n    /**\n     * Handle Drag end\n     * @param {Object} e event\n     */\n    const handleDragEnd = (e) => {\n        // Identify the event target.\n        let target;\n        if (e.type == 'touchend') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest('.category-list-item');\n        }\n\n        if (!target) {\n            return;\n        }\n\n        if (e.cancelable) {\n            e.preventDefault();\n        }\n\n        // This is not a drag and drop event or drop on the same element.\n        if (!sourceid || sourceid == target.id) {\n            return;\n        }\n\n        // Source item.\n        const source = document.getElementById(sourceid);\n        if (!source) {\n            return;\n        }\n\n        // Reset sourceid.\n        sourceid = null;\n\n        // Insert the source item after the \"target\" item.\n        target.closest('.category_list').insertBefore(source, target.nextSibling);\n\n        // Old category.\n        const originCategory = source.dataset.categoryid;\n\n        // Insert after this category.\n        const insertaftercategory = target.dataset.categoryid;\n\n        // Insert the category after the target category\n        setCatOrder(originCategory, insertaftercategory, pagecontextid);\n    };\n\n    // Add event to list item.\n    listitems.forEach(item => {\n\n        // On touch start.\n        item.ontouchstart = (e) => {\n            handleDragStart(e);\n        };\n\n        // On touch move.\n        item.ontouchmove = (e) => {\n            handleDrag(e);\n        };\n\n        // On touch en.\n        item.ontouchend = (e) => {\n            handleDragEnd(e);\n        };\n\n        // On mouse down.\n        item.onmousedown = (e) => {\n            handleDragStart(e);\n        };\n\n        // On mouse move.\n        item.onmousemove = (e) => {\n            handleDrag(e);\n        };\n\n        // On mouse up.\n        item.onmouseup = (e) => {\n            handleDragEnd(e);\n        };\n\n    });\n};\n\n/**\n * Call category_rendering fragment.\n *\n * @param {number} contextid String containing new ordered categories.\n * @returns {Promise}\n */\nconst getCategoriesFragment = (contextid) => {\n    let params = {\n        url: location.href,\n    };\n    return Fragment.loadFragment('qbank_managecategories', 'category_rendering', contextid, params);\n};\n\n/**\n * Call external function update_category_order - inserts the updated column in the question_categories table.\n *\n * @param {number} origincategory Category which was dragged.\n * @param {number} insertaftercategory Context where category was dropped.\n * @param {number} pagecontextid Context from which the category was dragged.\n */\nconst setCatOrder = (origincategory, insertaftercategory, pagecontextid) => {\n    const call = {\n        methodname: 'qbank_managecategories_update_category_order',\n        args: {\n            origincategory: origincategory,\n            insertaftercategory: insertaftercategory,\n        }\n    };\n    Ajax.call([call])[0]\n        .then(() => {\n            return getCategoriesFragment(pagecontextid);\n        })\n        .catch(error => {\n            Notification.addNotification({\n                message: error.message,\n                type: 'error',\n            });\n            document.getElementsByClassName('alert-danger')[0]?.scrollIntoView();\n            return getCategoriesFragment(pagecontextid);\n        })\n        .then((html, js) => {\n            Templates.replaceNode('#categoriesrendered', html, js);\n            return;\n        })\n        .catch(Notification.exception);\n};\n\n\n/**\n * Method to add listener on category arrow - descendants.\n *\n * @param {number} pagecontextid Context id for fragment.\n */\nconst categoryParentListener = (pagecontextid) => {\n    document.addEventListener('click', e => {\n\n        // Ignore if there is no categories containers.\n        if (!e.target.closest('#categoriesrendered')) {\n            return;\n        }\n\n        // Ignore if there is no action icon.\n        const actionIcon = e.target.closest('.action-icon');\n        if (!actionIcon) {\n            return;\n        }\n\n        // Retrieve data from action icon.\n        const data = actionIcon.dataset;\n\n        // Move category.\n        const call = {\n            methodname: 'qbank_managecategories_update_category_order',\n            args: {\n                origincategory: data.tomove,\n                newparentcategory: data.tocategory,\n            }\n        };\n\n        Ajax.call([call])[0]\n            .then(() => getCategoriesFragment(pagecontextid))\n            .then((html, js) => {\n                Templates.replaceNode('#categoriesrendered', html, js);\n                return;\n            })\n            .catch(Notification.exception);\n    });\n};\n\n/**\n * Sets events listener for checkbox ticking change.\n */\nconst setupShowDescriptionCheckbox = () => {\n    document.addEventListener('click', e => {\n        const checkbox = e.target.closest('[name=\"qbshowdescr\"]');\n        if (!checkbox) {\n            return;\n        }\n        checkbox.form.submit();\n    });\n};\n\nexport const init = (pagecontextid) => {\n    categoryParentListener(pagecontextid);\n    setupSortableLists(pagecontextid);\n    setupShowDescriptionCheckbox();\n};\n"],"names":["getCategoriesFragment","contextid","params","url","location","href","Fragment","loadFragment","setCatOrder","origincategory","insertaftercategory","pagecontextid","call","methodname","args","then","catch","error","addNotification","message","type","document","getElementsByClassName","scrollIntoView","html","js","replaceNode","Notification","exception","addEventListener","e","target","closest","actionIcon","data","dataset","tomove","newparentcategory","tocategory","categoryParentListener","listitems","querySelectorAll","sourceid","getTouchTarget","elementFromPoint","changedTouches","pageX","pageY","handleDragStart","cancelable","preventDefault","id","handleDrag","forEach","item","classList","remove","add","handleDragEnd","source","getElementById","insertBefore","nextSibling","originCategory","categoryid","ontouchstart","ontouchmove","ontouchend","onmousedown","onmousemove","onmouseup","setupSortableLists","checkbox","form","submit"],"mappings":";;;;;;;;;0QAsMMA,sBAAyBC,gBACvBC,OAAS,CACTC,IAAKC,SAASC,aAEXC,kBAASC,aAAa,yBAA0B,qBAAsBN,UAAWC,SAUtFM,YAAc,CAACC,eAAgBC,oBAAqBC,uBAChDC,KAAO,CACTC,WAAY,+CACZC,KAAM,CACFL,eAAgBA,eAChBC,oBAAqBA,oCAGxBE,KAAK,CAACA,OAAO,GACbG,MAAK,IACKf,sBAAsBW,iBAEhCK,OAAMC,+DACUC,gBAAgB,CACzBC,QAASF,MAAME,QACfC,KAAM,wCAEVC,SAASC,uBAAuB,gBAAgB,2DAAIC,iBAC7CvB,sBAAsBW,kBAEhCI,MAAK,CAACS,KAAMC,yBACCC,YAAY,sBAAuBF,KAAMC,OAGtDT,MAAMW,sBAAaC,0BA0DPjB,gBAjDWA,CAAAA,gBAC5BU,SAASQ,iBAAiB,SAASC,QAG1BA,EAAEC,OAAOC,QAAQ,oCAKhBC,WAAaH,EAAEC,OAAOC,QAAQ,oBAC/BC,wBAKCC,KAAOD,WAAWE,QAGlBvB,KAAO,CACTC,WAAY,+CACZC,KAAM,CACFL,eAAgByB,KAAKE,OACrBC,kBAAmBH,KAAKI,2BAI3B1B,KAAK,CAACA,OAAO,GACbG,MAAK,IAAMf,sBAAsBW,iBACjCI,MAAK,CAACS,KAAMC,yBACCC,YAAY,sBAAuBF,KAAMC,OAGtDT,MAAMW,sBAAaC,eAkB5BW,CAAuB5B,eArQCA,CAAAA,sBAClB6B,UAAYnB,SAASoB,iBAAiB,2BAExCC,eAOEC,eAAkBb,GACLT,SAASuB,iBACpBd,EAAEe,eAAe,GAAGC,MACpBhB,EAAEe,eAAe,GAAGE,OAGVf,QAAQ,uBAOpBgB,gBAAmBlB,QAEjBC,OAEAA,OADU,cAAVD,EAAEV,KACOuB,eAAeb,GAEfA,EAAEC,OAAOC,QAAQ,uBAG1BF,EAAEmB,YACFnB,EAAEoB,iBAINR,SAAWX,OAAOoB,IAOhBC,WAActB,QAEZC,OAEAA,OADU,aAAVD,EAAEV,KACOuB,eAAeb,GAEfA,EAAEC,OAAOC,QAAQ,uBAIzBD,QAKAW,WAIDZ,EAAEmB,YACFnB,EAAEoB,iBAINV,UAAUa,SAAQC,OACdA,KAAKC,UAAUC,OAAO,oBAE1BzB,OAAOwB,UAAUE,IAAI,mBAOnBC,cAAiB5B,QAEfC,UAEAA,OADU,YAAVD,EAAEV,KACOuB,eAAeb,GAEfA,EAAEC,OAAOC,QAAQ,wBAGzBD,iBAIDD,EAAEmB,YACFnB,EAAEoB,kBAIDR,UAAYA,UAAYX,OAAOoB,gBAK9BQ,OAAStC,SAASuC,eAAelB,cAClCiB,cAKLjB,SAAW,KAGXX,OAAOC,QAAQ,kBAAkB6B,aAAaF,OAAQ5B,OAAO+B,mBAGvDC,eAAiBJ,OAAOxB,QAAQ6B,WAGhCtD,oBAAsBqB,OAAOI,QAAQ6B,WAG3CxD,YAAYuD,eAAgBrD,oBAAqBC,gBAIrD6B,UAAUa,SAAQC,OAGdA,KAAKW,aAAgBnC,IACjBkB,gBAAgBlB,IAIpBwB,KAAKY,YAAepC,IAChBsB,WAAWtB,IAIfwB,KAAKa,WAAcrC,IACf4B,cAAc5B,IAIlBwB,KAAKc,YAAetC,IAChBkB,gBAAgBlB,IAIpBwB,KAAKe,YAAevC,IAChBsB,WAAWtB,IAIfwB,KAAKgB,UAAaxC,IACd4B,cAAc5B,QA8GtByC,CAAmB5D,eAXnBU,SAASQ,iBAAiB,SAASC,UACzB0C,SAAW1C,EAAEC,OAAOC,QAAQ,wBAC7BwC,UAGLA,SAASC,KAAKC"}