{"version":3,"sources":["../src/question_slot.js"],"names":["SELECTORS","setSelectors","slotId","slotIdClass","VERSION_LIST","SLOT_ID","ajax","request","done","Ajax","call","response","fail","Notification","exception","changeVersion","slot","quizId","selectElement","document","querySelector","addEventListener","versionIdSelected","parseInt","value","mainContainer","methodname","args","slotid","quizid","newversionid","dataToRender","canbeedited","checkbox","questionnumber","questionname","questionicons","questiondependencyicon","versionoption","JSON","parse","Templates","render","then","html","innerHTML","catch","init"],"mappings":"4LAyBA,OACA,OACA,O,sDAQIA,CAAAA,CAAS,CAAG,E,CAQVC,CAAY,CAAG,SAACC,CAAD,CAAY,CAC7B,GAAIC,CAAAA,CAAW,CAAG,EAAlB,CACA,GAAID,CAAJ,CAAY,CACRC,CAAW,CAAG,IAAMD,CACvB,CAEDF,CAAS,CAAG,CACRI,YAAY,CAAE,WAAaD,CADnB,CAERE,OAAO,CAAE,yBAA2BF,CAF5B,CAIf,C,CASKG,CAAI,CAAG,SAACC,CAAD,CAAUC,CAAV,CAAmB,CAG5B,MAAOC,WAAKC,IAAL,CAAUH,CAAV,EAAmB,CAAnB,EAAsBC,IAAtB,CAA2B,SAASG,CAAT,CAAmB,CAEjDH,CAAI,CAACG,CAAD,CACP,CAHM,EAGJC,IAHI,CAGCC,UAAaC,SAHd,CAIV,C,CAoBKC,CAAa,CAAG,SAACb,CAAD,CAASc,CAAT,CAAeC,CAAf,CAA0B,CAC5C,GAAMC,CAAAA,CAAa,CAAGC,QAAQ,CAACC,aAAT,CAAuBpB,CAAS,CAACI,YAAjC,CAAtB,CACAc,CAAa,CAACG,gBAAd,CAA+B,QAA/B,CAAyC,UAAM,CAC3C,GAAIC,CAAAA,CAAiB,CAAGC,QAAQ,CAACL,CAAa,CAACM,KAAf,CAAhC,CACAvB,CAAY,CAACC,CAAD,CAAZ,CAF2C,GAGvCuB,CAAAA,CAAa,CAAGN,QAAQ,CAACC,aAAT,CAAuBpB,CAAS,CAACK,OAAjC,CAHuB,CAa3CC,CAAI,CATU,CAAC,CACXoB,UAAU,CAAE,4BADD,CAEXC,IAAI,CAAE,CACFC,MAAM,CAAE1B,CADN,CAEFc,IAAI,CAAEA,CAFJ,CAGFa,MAAM,CAAEZ,CAHN,CAIFa,YAAY,CAAER,CAJZ,CAFK,CAAD,CASV,CAAU,SAASX,CAAT,CAAmB,CAC7B,GAAIoB,CAAAA,CAAY,CAAG,CACfH,MAAM,CAAEjB,CAAQ,CAACiB,MADF,CAEfI,WAAW,CAAErB,CAAQ,CAACqB,WAFP,CAGfC,QAAQ,CAAEtB,CAAQ,CAACsB,QAHJ,CAIfC,cAAc,CAAEvB,CAAQ,CAACuB,cAJV,CAKfC,YAAY,CAAExB,CAAQ,CAACwB,YALR,CAMfC,aAAa,CAAEzB,CAAQ,CAACyB,aANT,CAOfC,sBAAsB,CAAE1B,CAAQ,CAAC0B,sBAPlB,CAQfC,aAAa,CAAEC,IAAI,CAACC,KAAL,CAAW7B,CAAQ,CAAC2B,aAApB,CARA,CAAnB,CAUAG,UAAUC,MAAV,CAAiB,wBAAjB,CAA2CX,CAA3C,EAAyDY,IAAzD,CAA8D,SAASC,CAAT,CAAe,CACzEnB,CAAa,CAACoB,SAAd,CAA0BD,CAA1B,CACA,MAAOA,CAAAA,CACV,CAHD,EAGGE,KAHH,CAGSjC,UAAaC,SAHtB,CAIH,CAfG,CAgBP,CA7BD,CA8BH,C,QASmB,QAAPiC,CAAAA,IAAO,CAAC7C,CAAD,CAASc,CAAT,CAAeC,CAAf,CAA0B,CAC1ChB,CAAY,CAACC,CAAD,CAAZ,CACAa,CAAa,CAACb,CAAD,CAASc,CAAT,CAAeC,CAAf,CAChB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Render the question slot template for each question in the quiz edit view.\n *\n * @package    mod_quiz\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Guillermo Gomez Arias <guillermogomez@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\n\n/**\n *\n * Initialize CSS selectors.\n *\n * @type {object}\n */\nlet SELECTORS = {};\n\n/**\n * Set CSS selector.\n * Add slot id to class if is not null.\n *\n * @param {int} slotId The slot id.\n */\nconst setSelectors = (slotId) => {\n    let slotIdClass = '';\n    if (slotId) {\n        slotIdClass = '-' + slotId;\n    }\n\n    SELECTORS = {\n        VERSION_LIST: '#version' + slotIdClass,\n        SLOT_ID: '#mod-indent-outer-slot' + slotIdClass,\n    };\n};\n\n/**\n * Helper ajax function.\n *\n * @param {object} request The request to be made.\n * @param {function} done The function to be executed once ajax call is done.\n * @returns {Promise}\n */\nconst ajax = (request, done) => {\n    // ...toggleLoading();\n\n    return Ajax.call(request)[0].done(function(response) {\n        // ...toggleLoading();\n        done(response);\n    }).fail(Notification.exception);\n};\n\n/**\n * Toggle loading spinner.\n */\nconst toggleLoading = () => {\n    let loadingBlock = document.querySelector(SELECTORS.LOADING_BLOCK);\n    let loadingSpinner = loadingBlock.querySelector(SELECTORS.LOADING_BLOCK_ICON);\n\n    loadingBlock.classList.toggle('hidden');\n    loadingSpinner.classList.toggle('hidden');\n};\n\n/**\n * Replace the container with a new version.\n *\n * @param {int} slotId\n * @param {int} slot\n * @param {int} quizId\n */\nconst changeVersion = (slotId, slot, quizId) => {\n    const selectElement = document.querySelector(SELECTORS.VERSION_LIST);\n    selectElement.addEventListener('change', () => {\n        let versionIdSelected = parseInt(selectElement.value);\n        setSelectors(slotId);\n        let mainContainer = document.querySelector(SELECTORS.SLOT_ID);\n        let request = [{\n            methodname: 'mod_quiz_get_question_slot',\n            args: {\n                slotid: slotId,\n                slot: slot,\n                quizid: quizId,\n                newversionid: versionIdSelected,\n            }\n        }];\n        ajax(request, function(response) {\n            let dataToRender = {\n                slotid: response.slotid,\n                canbeedited: response.canbeedited,\n                checkbox: response.checkbox,\n                questionnumber: response.questionnumber,\n                questionname: response.questionname,\n                questionicons: response.questionicons,\n                questiondependencyicon: response.questiondependencyicon,\n                versionoption: JSON.parse(response.versionoption)\n            };\n            Templates.render('mod_quiz/question_slot', dataToRender).then(function(html) {\n                mainContainer.innerHTML = html;\n                return html;\n            }).catch(Notification.exception);\n        });\n    });\n};\n\n/**\n * Entrypoint of the js.\n *\n * @param {int} slotId\n * @param {int} slot\n * @param {int} quizId\n */\nexport const init = (slotId, slot, quizId) => {\n    setSelectors(slotId);\n    changeVersion(slotId, slot, quizId);\n};\n"],"file":"question_slot.min.js"}