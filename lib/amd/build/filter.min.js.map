{"version":3,"sources":["../src/filter.js"],"names":["init","filterRegionId","resultType","applyCallback","filterSet","document","querySelector","activeFilters","courseid","CourseFilter","getFilterRegion","Selectors","filterset","regions","filterlist","addFilterRow","pendingPromise","Pending","rownum","querySelectorAll","filter","region","length","Templates","renderForPromise","then","html","js","newContentNodes","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","fields","type","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","getFilterDataSource","filterType","filterDataNode","datasource","byName","addFilter","initialFilterValues","dataset","Filter","GenericFilter","filterTypeClass","typeField","value","disabled","getFilterObject","name","removeOrReplaceFilterRow","refreshContent","filterCount","replaceFilterRow","removeFilterRow","hasFilterValue","removeFilterObject","remove","updateTableFromFilter","getAvailableFilterLegends","filterLegends","index","innerText","rowNum","replaceNode","filterName","tearDown","removeAllFilters","filters","removeEmptyFilters","options","option","classList","add","addRowButton","actions","addRow","all","setAttribute","removeAttribute","filtermatch","join","filterverb","setFilterFromConfig","config","filterConfig","Object","entries","Promise","jointype","filterPromises","map","filterData","filterValues","values","promise","filterValue","useDynamicTable","DynamicTable","setFilters","getTableFromId","tableRegion","parseInt","maxFilters","typeListSelect","requests","Array","_","rowIndex","push","fetchedStrings","legendStrings","setDynamicTable","tableRoot","initialFilters","getFilters","initialFilterPromise","addEventListener","e","target","closest","preventDefault","applyFilters","resetFilters","filterRegion","CustomEvents","define","events","accessibleChange","on","filtertypeselect"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Filter managemnet.\n *\n * @module     core/filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from 'core/local/filter/filtertypes/courseid';\nimport * as DynamicTable from 'core_table/dynamic';\nimport GenericFilter from 'core/local/filter/base';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from 'core/local/filter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} filterRegionId\n * @param {String} resultType\n * @param {Function} applyCallback\n */\nexport const init = (filterRegionId, resultType, applyCallback) => {\n    // Keep a reference to the filterset.\n    const filterSet = document.querySelector(`#${filterRegionId}`);\n\n    // Keep a reference to all of the active filters.\n    const activeFilters = {\n        courseid: new CourseFilter('courseid', filterSet),\n    };\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    const getFilterRegion = () => filterSet.querySelector(Selectors.filterset.regions.filterlist);\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    const addFilterRow = () => {\n        const pendingPromise = new Pending('core/filter:addFilterRow');\n\n        const rownum = 1 + getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core/filter_row', {\"rownumber\": rownum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.appendNodeContents(getFilterRegion(), html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    const getFilterDataSource = filterType => {\n        const filterDataNode = filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    };\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    const addFilter = async(filterRow, filterType, initialFilterValues) => {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        activeFilters[filterType] = new Filter(filterType, filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        return activeFilters[filterType];\n    };\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    const getFilterObject = name => {\n        return activeFilters[name];\n    };\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeOrReplaceFilterRow = (filterRow, refreshContent) => {\n        const filterCount = getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n\n        if (filterCount === 1) {\n            replaceFilterRow(filterRow, refreshContent);\n        } else {\n            removeFilterRow(filterRow, refreshContent);\n        }\n    };\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeFilterRow = async(filterRow, refreshContent = true) => {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await getAvailableFilterLegends();\n\n        getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    };\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    const replaceFilterRow = (filterRow, refreshContent = true, rowNum = 1) => {\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core/filter_row', {\"rownumber\": rowNum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            // Refresh the table.\n            if (refreshContent) {\n                return updateTableFromFilter();\n            } else {\n                return filterRow;\n            }\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    const removeFilterObject = filterName => {\n        if (filterName) {\n            const filter = getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete activeFilters[filterName];\n            }\n        }\n    };\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    const removeAllFilters = () => {\n        const pendingPromise = new Pending('core/filter:setFilterFromConfig');\n\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return updateTableFromFilter()\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        });\n    };\n\n    /**\n     * Remove any empty filters.\n     */\n    const removeEmptyFilters = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    };\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    const updateFiltersOptions = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            filterSet.dataset.filterverb = 2;\n        } else {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    };\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n\n            return addFilterRow().then(([filterRow]) => addFilter(filterRow, filterType, filterValues));\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return removeEmptyFilters();\n        })\n        .then(updateFiltersOptions)\n        .then(updateTableFromFilter);\n    };\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    const updateTableFromFilter = () => {\n        const pendingPromise = new Pending('core/filter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        if (useDynamicTable) {\n            return DynamicTable.setFilters(\n                DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n                {\n                    jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                    filters,\n                }\n            )\n                .then(result => {\n                    pendingPromise.resolve();\n\n                    return result;\n                })\n                .catch(Notification.exception);\n        }\n\n        if (applyCallback) {\n            filters['filterverb'] = filterSet.dataset.filterverb;\n            applyCallback(filters, pendingPromise);\n        }\n    };\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    const getAvailableFilterLegends = async() => {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n        .then(fetchedStrings => {\n            return fetchedStrings;\n        })\n        .catch(Notification.exception);\n\n        return legendStrings;\n    };\n\n    const setDynamicTable = () => {\n        const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n        const initialFilters = DynamicTable.getFilters(tableRoot);\n        if (initialFilters) {\n            const initialFilterPromise = new Pending('core/filter:setFilterFromConfig');\n            // Apply the initial filter configuration.\n            setFilterFromConfig(initialFilters)\n                .then(() => initialFilterPromise.resolve())\n                .catch();\n        }\n    };\n\n    // Add listeners for the main actions.\n    filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filterset.actions.addRow)) {\n            e.preventDefault();\n\n            addFilterRow();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n            e.preventDefault();\n\n            updateTableFromFilter();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n            e.preventDefault();\n\n            removeAllFilters();\n        }\n    });\n\n    // Add the listener to remove a single filter.\n    filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filter.actions.remove)) {\n            e.preventDefault();\n\n            removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n        }\n    });\n\n    // Add listeners for the filter type selection.\n    let filterRegion = jQuery(getFilterRegion());\n    CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n    filterRegion.on(CustomEvents.events.accessibleChange, e => {\n        const typeField = e.target.closest(Selectors.filter.fields.type);\n        if (typeField && typeField.value) {\n            const filter = e.target.closest(Selectors.filter.region);\n\n            addFilter(filter, typeField.value);\n        }\n    });\n\n    filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n        filterSet.dataset.filterverb = e.target.value;\n    });\n\n    // Set up by result type.\n    let useDynamicTable = false;\n    switch (resultType) {\n        case 'DynamicTable':\n            setDynamicTable();\n            useDynamicTable = true;\n            break;\n        case 'QbankTable': {\n            const filtertypeselect = filterSet.querySelector(Selectors.filter.fields.type);\n            filtertypeselect.value = 'category';\n            break;\n        }\n    }\n};\n"],"file":"filter.min.js"}