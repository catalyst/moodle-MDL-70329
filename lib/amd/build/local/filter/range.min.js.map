{"version":3,"file":"range.min.js","sources":["../../../src/local/filter/range.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Range filter.\n *\n * @module     core/local/filter/range\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Selectors from 'core/local/filter/selectors';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\nconst filterRangeOptions = {\n    '0': 'optionone',\n    '1': 'optiontwo',\n    '2': 'optionthree'\n};\nexport default class {\n    /**\n     * Constructor for a new filter.\n     *\n     * @param {String} filterType The type of filter that this relates to\n     * @param {HTMLElement} filterSet The root node for the participants filterset\n     * @param {Array} initialValues The initial values for the selector\n     * @param {Number} filterRange\n     */\n    constructor(filterType, filterSet, initialValues, filterRange) {\n        this.filterType = filterType;\n        this.rootNode = filterSet;\n\n        // If URL parameters are loaded following variable are set.\n        this.initialValues = initialValues;\n        this.filterRange = filterRange;\n\n        this.setUpRangeUi('text');\n    }\n\n    /**\n     * Perform any tear-down for this filter type.\n     */\n    tearDown() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Get the root node for this filter.\n     *\n     * @returns {HTMLElement}\n     */\n    get filterRoot() {\n        return this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n    }\n\n    /**\n     * Renders one or two input based on given context.\n     *\n     * @param {Object} context Context for mustache containing one or two placeholder.\n     */\n    async displayRange(context) {\n        Templates.render('core/local/filter/range', context)\n        .then((rangeUi, js) => {\n            Templates.replaceNodeContents(Selectors.filter.regions.values, rangeUi, js);\n            return;\n        }).fail();\n    }\n\n    /**\n     * Adds listenner on filter range region.\n     *\n     * @param {string} type Type of input desired.\n     */\n    async rangeListenner(type) {\n        const placeholderone = await this.placeholderOne;\n        const placeholdertwo = await this.placeholderTwo;\n        this.filterRoot.querySelector(Selectors.filter.fields.range).addEventListener('change', () => {\n            const context = {\n                placeholderone: placeholderone,\n                type: type\n            };\n            if (this.rangetype === 2) {\n                context.placeholdertwo = placeholdertwo;\n            }\n            this.displayRange(context);\n        });\n    }\n\n    /**\n     * Sets up base range UI.\n     *\n     * @param {string} type Type of input desired.\n     * @param {Array} initialValues Initial values.\n     */\n    async setUpRangeUi(type, initialValues) {\n        const placeholderone = await this.placeholderOne;\n        const placeholdertwo = await this.placeholderTwo;\n        const context = {\n            placeholderone: placeholderone,\n            placeholdertwo: placeholdertwo,\n            type: type\n        };\n\n        const filterRangeContext = {};\n        // Default filter range value.\n        filterRangeContext[filterRangeOptions[2]] = true;\n        if (this.filterRange !== undefined) {\n            filterRangeContext[filterRangeOptions[2]] = false;\n            filterRangeContext[filterRangeOptions[this.filterRange]] = true;\n        }\n        // When url parameters loaded supplied - display setup accordingly.\n        if (initialValues !== undefined) {\n            context.initialvalueone = initialValues[0];\n            // Do not display a second range value if initial value is not between.\n            context.placeholdertwo = null;\n            if (initialValues.length > 1) {\n                context.initialvaluetwo = initialValues[1];\n                // If multiple values are supplied - display two range inputs.\n                context.placeholdertwo = placeholdertwo;\n            }\n        }\n        Templates.render('core/filter_range', filterRangeContext)\n        .then((html, js) => {\n            Templates.replaceNodeContents(Selectors.filter.regions.range, html, js);\n            this.displayRange(context)\n            .then(() => {\n                this.rangeListenner(type);\n                return;\n            }).catch();\n            return;\n        })\n        .catch();\n    }\n\n    /**\n     * Get the placeholder for range value one.\n     *\n     * @return {String} String\n     */\n    get placeholderOne() {\n        return getString('rangestart', 'core_question');\n    }\n\n    /**\n     * Get the placeholder for range value two.\n     *\n     * @return {String} String\n     */\n    get placeholderTwo() {\n        return getString('rangeend', 'core_question');\n    }\n\n    /**\n     * Get the name of this filter.\n     *\n     * @returns {String}\n     */\n    get name() {\n        return this.filterType;\n    }\n\n    /**\n     * Get the type of join specified.\n     *\n     * @returns {Number}\n     */\n    get jointype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.join).value, 10);\n    }\n\n    /**\n     * Get the type of range specified.\n     *\n     * @returns {Number}\n     */\n    get rangetype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.range).value, 10);\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get rawValues() {\n        const rangeValue1 = document.getElementById('rangeValue1').value;\n        const values = [rangeValue1];\n        if (this.rangetype === 2) {\n            const rangeValue2 = document.getElementById('rangeValue2').value;\n            values.push(rangeValue2);\n        }\n        return values;\n    }\n\n    /**\n     * Get the composed value for this filter.\n     *\n     * @returns {Object}\n     */\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            rangetype: this.rangetype,\n            values: this.rawValues,\n        };\n    }\n}\n"],"names":["filterRangeOptions","constructor","filterType","filterSet","initialValues","filterRange","rootNode","setUpRangeUi","tearDown","filterRoot","this","querySelector","Selectors","filter","byName","context","render","then","rangeUi","js","replaceNodeContents","regions","values","fail","type","placeholderone","placeholderOne","placeholdertwo","placeholderTwo","fields","range","addEventListener","rangetype","displayRange","filterRangeContext","undefined","initialvalueone","length","initialvaluetwo","html","rangeListenner","catch","name","jointype","parseInt","join","value","rawValues","document","getElementById","rangeValue2","push","filterValue"],"mappings":";;;;;;;;uLA2BMA,mBAAqB,GAClB,cACA,cACA,6CAWLC,YAAYC,WAAYC,UAAWC,cAAeC,kBACzCH,WAAaA,gBACbI,SAAWH,eAGXC,cAAgBA,mBAChBC,YAAcA,iBAEdE,aAAa,QAMtBC,YASIC,wBACOC,KAAKJ,SAASK,cAAcC,mBAAUC,OAAOC,OAAOJ,KAAKR,gCAQjDa,4BACLC,OAAO,0BAA2BD,SAC3CE,MAAK,CAACC,QAASC,yBACFC,oBAAoBR,mBAAUC,OAAOQ,QAAQC,OAAQJ,QAASC,OAEzEI,4BAQcC,YACXC,qBAAuBf,KAAKgB,eAC5BC,qBAAuBjB,KAAKkB,oBAC7BnB,WAAWE,cAAcC,mBAAUC,OAAOgB,OAAOC,OAAOC,iBAAiB,UAAU,WAC9EhB,QAAU,CACZU,eAAgBA,eAChBD,KAAMA,MAEa,IAAnBd,KAAKsB,YACLjB,QAAQY,eAAiBA,qBAExBM,aAAalB,+BAUPS,KAAMpB,qBACfqB,qBAAuBf,KAAKgB,eAC5BC,qBAAuBjB,KAAKkB,eAC5Bb,QAAU,CACZU,eAAgBA,eAChBE,eAAgBA,eAChBH,KAAMA,MAGJU,mBAAqB,GAE3BA,mBAAmBlC,mBAAmB,KAAM,OACnBmC,IAArBzB,KAAKL,cACL6B,mBAAmBlC,mBAAmB,KAAM,EAC5CkC,mBAAmBlC,mBAAmBU,KAAKL,eAAgB,QAGzC8B,IAAlB/B,gBACAW,QAAQqB,gBAAkBhC,cAAc,GAExCW,QAAQY,eAAiB,KACrBvB,cAAciC,OAAS,IACvBtB,QAAQuB,gBAAkBlC,cAAc,GAExCW,QAAQY,eAAiBA,oCAGvBX,OAAO,oBAAqBkB,oBACrCjB,MAAK,CAACsB,KAAMpB,yBACCC,oBAAoBR,mBAAUC,OAAOQ,QAAQS,MAAOS,KAAMpB,SAC/Dc,aAAalB,SACjBE,MAAK,UACGuB,eAAehB,SAErBiB,WAGNA,QAQDf,4BACO,mBAAU,aAAc,iBAQ/BE,4BACO,mBAAU,WAAY,iBAQ7Bc,kBACOhC,KAAKR,WAQZyC,sBACOC,SAASlC,KAAKD,WAAWE,cAAcC,mBAAUC,OAAOgB,OAAOgB,MAAMC,MAAO,IAQnFd,uBACOY,SAASlC,KAAKD,WAAWE,cAAcC,mBAAUC,OAAOgB,OAAOC,OAAOgB,MAAO,IAQpFC,sBAEMzB,OAAS,CADK0B,SAASC,eAAe,eAAeH,UAEpC,IAAnBpC,KAAKsB,UAAiB,OAChBkB,YAAcF,SAASC,eAAe,eAAeH,MAC3DxB,OAAO6B,KAAKD,oBAET5B,OAQP8B,wBACO,CACHV,KAAMhC,KAAKgC,KACXC,SAAUjC,KAAKiC,SACfX,UAAWtB,KAAKsB,UAChBV,OAAQZ,KAAKqC"}