{"version":3,"sources":["../../../src/local/filter/binary.js"],"names":["binaryOptions","filterType","filterSet","initialValues","rootNode","getTextValues","then","displayBinarySelection","catch","optionalValues","optionOne","optionTwo","specificFilterSet","querySelector","Selectors","filter","byName","context","filtertype","textvalueone","textvaluetwo","Templates","render","binaryUi","js","replaceNodeContents","regions","values","fail","parseInt","filterRoot","fields","join","value","name","jointype"],"mappings":"0MAwBA,OACA,O,srBAGMA,CAAAA,CAAa,CAAG,CAClB,EAAK,WADa,CAElB,EAAK,WAFa,C,cAYlB,WAAYC,CAAZ,CAAwBC,CAAxB,CAAmCC,CAAnC,CAAkD,sBAC9C,KAAKF,UAAL,CAAkBA,CAAlB,CACA,KAAKG,QAAL,CAAgBF,CAAhB,CACA,KAAKC,aAAL,CAAqBA,CAArB,CACA,KAAKE,aAAL,GAAqBC,IAArB,CAA0B,UAAM,CAC5B,CAAI,CAACC,sBAAL,EAEH,CAHD,EAGGC,KAHH,EAIH,C,8CAKU,CAEV,C,mFAOmBC,C,wFACZA,CAAc,S,iCACS,iBAAU,KAAV,C,QAAvB,KAAKC,S,uBACkB,iBAAU,IAAV,C,QAAvB,KAAKC,S,+BAEL,KAAKD,SAAL,CAAiBD,CAAc,CAAC,CAAD,CAA/B,CACA,KAAKE,SAAL,CAAiBF,CAAc,CAAC,CAAD,CAA/B,C,0LAQiB,IAEfG,CAAAA,CAAiB,CAAG,KAAKR,QAAL,CAAcS,aAAd,CAA4BC,UAAUC,MAAV,CAAiBC,MAAjB,CAAwB,KAAKf,UAA7B,CAA5B,CAFL,CAGfgB,CAAO,CAAG,CAACC,UAAU,CAAE,KAAKjB,UAAlB,CAA8BkB,YAAY,CAAE,KAAKT,SAAjD,CAA4DU,YAAY,CAAE,KAAKT,SAA/E,CAHK,CAKrBM,CAAO,CAACjB,CAAa,CAAC,CAAD,CAAd,CAAP,IAEA,GAAI,KAAKG,aAAL,SAAJ,CAAsC,CAClCc,CAAO,CAACjB,CAAa,CAAC,CAAD,CAAd,CAAP,IACAiB,CAAO,CAACjB,CAAa,CAAC,KAAKG,aAAL,CAAmB,CAAnB,CAAD,CAAd,CAAP,GACH,CACDkB,UAAUC,MAAV,CAAiB,mCAAjB,CAAsDL,CAAtD,EACCX,IADD,CACM,SAACiB,CAAD,CAAWC,CAAX,CAAkB,CACpBH,UAAUI,mBAAV,CAA8Bb,CAAiB,CAACC,aAAlB,CAAgCC,UAAUC,MAAV,CAAiBW,OAAjB,CAAyBC,MAAzD,CAA9B,CAAgGJ,CAAhG,CAA0GC,CAA1G,CAEH,CAJD,EAIGI,IAJH,EAKH,C,sCAOgB,CACb,MAAO,MAAKxB,QAAL,CAAcS,aAAd,CAA4BC,UAAUC,MAAV,CAAiBC,MAAjB,CAAwB,KAAKf,UAA7B,CAA5B,CACV,C,gCAOU,CACP,MAAO,MAAKA,UACf,C,oCAOc,CACX,MAAO4B,CAAAA,QAAQ,CAAC,KAAKC,UAAL,CAAgBjB,aAAhB,CAA8BC,UAAUC,MAAV,CAAiBgB,MAAjB,CAAwBC,IAAtD,EAA4DC,KAA7D,CAAoE,EAApE,CAClB,C,kCAOY,CACT,MAAO,MAAKH,UAAL,CAAgBjB,aAAhB,+BAAoD,KAAKqB,IAAzD,SAAmED,KAC7E,C,uCAOiB,CACd,MAAO,CACHC,IAAI,CAAE,KAAKA,IADR,CAEHC,QAAQ,CAAE,KAAKA,QAFZ,CAGHR,MAAM,CAAE,KAAKA,MAHV,CAKV,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base filter for binary selector ie: (Yes / No).\n *\n * @module     core/local/filter/binary\n * @author     2022 Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @copyright  2022 Catalyst IT Australia Pty Ltd\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from 'core/local/filter/selectors';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\n\nconst binaryOptions = {\n    '0': 'optionone',\n    '1': 'optiontwo'\n};\nexport default class {\n    /**\n     * Constructor for binary base filter.\n     *\n     * @param {String} filterType The type of filter that this relates to\n     * @param {HTMLElement} filterSet The root node for the participants filterset\n     * @param {Array} initialValues The initial values for the selector\n     */\n    constructor(filterType, filterSet, initialValues) {\n        this.filterType = filterType;\n        this.rootNode = filterSet;\n        this.initialValues = initialValues;\n        this.getTextValues().then(() => {\n            this.displayBinarySelection();\n            return;\n        }).catch();\n    }\n\n    /**\n     * Perform any tear-down for this filter type.\n     */\n    tearDown() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Allows alternate text values to be passed in array for select element.\n     *\n     * @param {Array} optionalValues Optional array precising select values.\n     */\n    async getTextValues(optionalValues) {\n        if (optionalValues === undefined) {\n            this.optionOne = await getString('yes');\n            this.optionTwo = await getString('no');\n        } else {\n            this.optionOne = optionalValues[0];\n            this.optionTwo = optionalValues[1];\n        }\n    }\n\n    /**\n     * Renders yes/no select input with proper selection.\n     *\n     */\n    displayBinarySelection() {\n        // We specify a specific filterset in case there are multiple filtering condition - avoiding glitches.\n        const specificFilterSet = this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n        const context = {filtertype: this.filterType, textvalueone: this.optionOne, textvaluetwo: this.optionTwo};\n        // Default selection.\n        context[binaryOptions[1]] = true;\n        // Load any URL parameter.\n        if (this.initialValues !== undefined) {\n            context[binaryOptions[1]] = false;\n            context[binaryOptions[this.initialValues[0]]] = true;\n        }\n        Templates.render('core/local/filter/binary_selector', context)\n        .then((binaryUi, js) => {\n            Templates.replaceNodeContents(specificFilterSet.querySelector(Selectors.filter.regions.values), binaryUi, js);\n            return;\n        }).fail();\n    }\n\n    /**\n     * Get the root node for this filter.\n     *\n     * @returns {HTMLElement}\n     */\n    get filterRoot() {\n        return this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n    }\n\n    /**\n     * Get the name of this filter.\n     *\n     * @returns {String}\n     */\n    get name() {\n        return this.filterType;\n    }\n\n    /**\n     * Get the type of join specified.\n     *\n     * @returns {Number}\n     */\n    get jointype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.join).value, 10);\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get values() {\n        return this.filterRoot.querySelector(`[data-filterfield=\"${this.name}\"]`).value;\n    }\n\n    /**\n     * Get the composed value for this filter.\n     *\n     * @returns {Object}\n     */\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            values: this.values,\n        };\n    }\n}\n"],"file":"binary.min.js"}