{"version":3,"file":"binary.min.js","sources":["../../../src/local/filter/binary.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base filter for binary selector ie: (Yes / No).\n *\n * @module     core/local/filter/binary\n * @author     2022 Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @copyright  2022 Catalyst IT Australia Pty Ltd\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Selectors from 'core/local/filter/selectors';\nimport Templates from 'core/templates';\nimport {get_strings as getStrings} from 'core/str';\n\nconst binaryOptions = {\n    '0': 'optionone',\n    '1': 'optiontwo'\n};\nexport default class {\n    /**\n     * Constructor for binary base filter.\n     *\n     * @param {String} filterType The type of filter that this relates to\n     * @param {HTMLElement} filterSet The root node for the participants filterset\n     * @param {Array} initialValues The initial values for the selector\n     */\n    constructor(filterType, filterSet, initialValues) {\n        this.filterType = filterType;\n        this.rootNode = filterSet;\n        this.initialValues = initialValues;\n        this.getTextValues().then(() => {\n            this.displayBinarySelection();\n        });\n    }\n\n    /**\n     * Perform any tear-down for this filter type.\n     */\n    tearDown() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Text values for select element.\n     *\n     * @returns {Promise}\n     */\n    getTextValues() {\n        return getStrings([\n            {key: 'yes'},\n            {key: 'no'},\n        ]).then((strings) => {\n            this.optionOne = strings[0];\n            this.optionTwo = strings[1];\n        });\n    }\n\n    /**\n     * Renders yes/no select input with proper selection.\n     *\n     */\n    displayBinarySelection() {\n        // We specify a specific filterset in case there are multiple filtering condition - avoiding glitches.\n        const specificFilterSet = this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n        const context = {filtertype: this.filterType, textvalueone: this.optionOne, textvaluetwo: this.optionTwo};\n        // Default selection.\n        context[binaryOptions[1]] = true;\n        // Load any URL parameter.\n        if (this.initialValues !== undefined) {\n            context[binaryOptions[1]] = false;\n            context[binaryOptions[this.initialValues[0]]] = true;\n        }\n        Templates.render('core/local/filter/binary_selector', context)\n        .then((binaryUi, js) => {\n            Templates.replaceNodeContents(specificFilterSet.querySelector(Selectors.filter.regions.values), binaryUi, js);\n            return;\n        }).fail();\n    }\n\n    /**\n     * Get the root node for this filter.\n     *\n     * @returns {HTMLElement}\n     */\n    get filterRoot() {\n        return this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n    }\n\n    /**\n     * Get the name of this filter.\n     *\n     * @returns {String}\n     */\n    get name() {\n        return this.filterType;\n    }\n\n    /**\n     * Get the type of join specified.\n     *\n     * @returns {Number}\n     */\n    get jointype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.join).value, 10);\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get values() {\n        return this.filterRoot.querySelector(`[data-filterfield=\"${this.name}\"]`).value;\n    }\n\n    /**\n     * Get the composed value for this filter.\n     *\n     * @returns {Object}\n     */\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            values: this.values,\n        };\n    }\n}\n"],"names":["binaryOptions","constructor","filterType","filterSet","initialValues","rootNode","getTextValues","then","displayBinarySelection","tearDown","key","strings","optionOne","optionTwo","specificFilterSet","this","querySelector","Selectors","filter","byName","context","filtertype","textvalueone","textvaluetwo","undefined","render","binaryUi","js","replaceNodeContents","regions","values","fail","filterRoot","name","jointype","parseInt","fields","join","value","filterValue"],"mappings":";;;;;;;;uLA4BMA,cAAgB,GACb,cACA,2CAULC,YAAYC,WAAYC,UAAWC,oBAC1BF,WAAaA,gBACbG,SAAWF,eACXC,cAAgBA,mBAChBE,gBAAgBC,MAAK,UACjBC,4BAObC,YASAH,uBACW,oBAAW,CACd,CAACI,IAAK,OACN,CAACA,IAAK,QACPH,MAAMI,eACAC,UAAYD,QAAQ,QACpBE,UAAYF,QAAQ,MAQjCH,+BAEUM,kBAAoBC,KAAKV,SAASW,cAAcC,mBAAUC,OAAOC,OAAOJ,KAAKb,aAC7EkB,QAAU,CAACC,WAAYN,KAAKb,WAAYoB,aAAcP,KAAKH,UAAWW,aAAcR,KAAKF,WAE/FO,QAAQpB,cAAc,KAAM,OAEDwB,IAAvBT,KAAKX,gBACLgB,QAAQpB,cAAc,KAAM,EAC5BoB,QAAQpB,cAAce,KAAKX,cAAc,MAAO,sBAE1CqB,OAAO,oCAAqCL,SACrDb,MAAK,CAACmB,SAAUC,yBACHC,oBAAoBd,kBAAkBE,cAAcC,mBAAUC,OAAOW,QAAQC,QAASJ,SAAUC,OAE3GI,OAQHC,wBACOjB,KAAKV,SAASW,cAAcC,mBAAUC,OAAOC,OAAOJ,KAAKb,aAQhE+B,kBACOlB,KAAKb,WAQZgC,sBACOC,SAASpB,KAAKiB,WAAWhB,cAAcC,mBAAUC,OAAOkB,OAAOC,MAAMC,MAAO,IAQnFR,oBACOf,KAAKiB,WAAWhB,2CAAoCD,KAAKkB,YAAUK,MAQ1EC,wBACO,CACHN,KAAMlB,KAAKkB,KACXC,SAAUnB,KAAKmB,SACfJ,OAAQf,KAAKe"}